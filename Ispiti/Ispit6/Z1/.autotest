{
    "id": 5745,
    "name": "Tehnike programiranja (2019\/2020), Ispit 6, Zadatak 1",
    "language": "C++",
    "preferred_compiler": "g++",
    "required_compiler": "g++",
    "compiler_features": [],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "profile": "true",
    "debug": "true",
    "test": "true",
    "compile": "true",
    "run": "false",
    "test_specifications": [
        {
            "id": 1,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "std::cout<<\"------ AT 1 ------\"<<std::endl;\n    \/\/ AT 1: Konstruktor bez parametara i geteri\n    {\n        Robot r;\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 2 ------\"<<std::endl;\n    \/\/ AT 2: Konstruktor sa tri parametra i geteri\n    {\n        Robot r(2,2,Pravci::Jug);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test podrazumijevane vrijednosti za pravac\n        Robot r1(2,2);\n\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 3 ------\"<<std::endl;\n    \/\/ AT 3: Testiranje metode PostaviPoziciju - 1\n    {\n        Robot r;\n\n        r.PostaviPoziciju(1,1);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test da li funkcija vraca referencu na objekt\n        r.PostaviPoziciju(2,2).PostaviPoziciju(4,4);\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 4 ------\"<<std::endl;\n    \/\/ AT 4: Testiranje metode PostaviPoziciju - 2\n    {\n        Robot r;\n\n        r.PostaviPoziciju({1,1});\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test da li funkcija vraca referencu na objekt\n        r.PostaviPoziciju({2,2}).PostaviPoziciju({4,4});\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 5 ------\"<<std::endl;\n    \/\/ AT 5: Testiranje metode PostaviOrijentaciju\n    {\n        Robot r;\n\n        r.PostaviOrijentaciju(Pravci::Istok);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test da li funkcija vraca referencu na objekt\n        r.PostaviOrijentaciju(Pravci::Sjever).PostaviOrijentaciju(Pravci::Jug);\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "------ AT 1 ------\\n0 0 0\\n------ AT 2 ------\\n2 2 2\\n2 2 0\\n------ AT 3 ------\\n1 1 0\\n4 4 0\\n------ AT 4 ------\\n1 1 0\\n4 4 0\\n------ AT 5 ------\\n0 0 1\\n0 0 2"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 2,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "std::cout<<\"------ AT 6 ------\"<<std::endl;\n    \/\/ AT 6: Testiranje getera sa metodama za postavljanje\n    {\n        Robot r(1,1);\n\n        r.PostaviPoziciju(-2,-2).PostaviOrijentaciju(Pravci::Zapad);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 7 ------\"<<std::endl;\n    \/\/ AT 7: Test operatora +=\n    {\n        Robot r(1,1,Pravci::Jug);\n\n        \/\/ Operator mora biti izveden kao funkcija clanica\n        r.operator+=(2);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test pomjeranja sa negativnim brojem (suprotni pravac)\n        r.PostaviOrijentaciju(Pravci::Istok);\n        r.operator+=(-2);\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test da li se vraca referenca na objekt\n        r.PostaviOrijentaciju(Pravci::Sjever);\n        r.operator+=(2).PostaviOrijentaciju(Pravci::Zapad).operator+=(2);\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 8 ------\"<<std::endl;\n    \/\/ AT 8: Test operatora -=\n    {\n        Robot r(1,1,Pravci::Jug);\n\n        \/\/ Operator mora biti izveden kao funkcija clanica\n        r.operator-=(2);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test pomjeranja sa negativnim brojem (suprotni pravac)\n        r.PostaviOrijentaciju(Pravci::Istok);\n        r.operator-=(-2);\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test da li se vraca referenca na objekt\n        r.PostaviOrijentaciju(Pravci::Sjever);\n        r.operator-=(2).PostaviOrijentaciju(Pravci::Zapad).operator-=(2);\n        ispis = r.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 9 ------\"<<std::endl;\n    \/\/ AT 9: Test operatora +\n    {\n        \/\/ Operator mora biti izveden kao funkcija clanica i vraca se novi robot\n        Robot r(1,1,Pravci::Jug);\n        Robot r1 = r.operator+(2);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<\"Stari: \"<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n        ispis = r1.DajPoziciju();\n        std::cout<<\"Novi: \"<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test pomjeranja sa negativnim brojem (suprotni pravac)\n        r.PostaviOrijentaciju(Pravci::Istok);\n        r1 = r.operator+(-2);\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test preostalih pravaca\n        r.PostaviOrijentaciju(Pravci::Zapad);\n        r1 = r.operator+(3);\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju()<<std::endl;\n\n        r.PostaviOrijentaciju(Pravci::Sjever);\n        r1 = r.operator+(4);\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 10 ------\"<<std::endl;\n    \/\/ AT 10: Test operatora -\n    {\n        \/\/ Operator mora biti izveden kao funkcija clanica i vraca se novi robot\n        Robot r(1,1,Pravci::Jug);\n        Robot r1 = r.operator-(2);\n\n        auto ispis = r.DajPoziciju();\n        std::cout<<\"Stari: \"<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r.DajOrijentaciju()<<std::endl;\n        ispis = r1.DajPoziciju();\n        std::cout<<\"Novi: \"<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test pomjeranja sa negativnim brojem (suprotni pravac)\n        r.PostaviOrijentaciju(Pravci::Istok);\n        r1 = r.operator-(-2);\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju()<<std::endl;\n\n        \/\/ Test preostalih pravaca\n        r.PostaviOrijentaciju(Pravci::Zapad);\n        r1 = r.operator-(3);\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju()<<std::endl;\n\n        r.PostaviOrijentaciju(Pravci::Sjever);\n        r1 = r.operator-(4);\n        ispis = r1.DajPoziciju();\n        std::cout<<ispis.first<<\" \"<<ispis.second<<\" \"<<(int)r1.DajOrijentaciju();\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "------ AT 6 ------\\n-2 -2 3\\n------ AT 7 ------\\n1 -1 2\\n-1 -1 1\\n-3 1 3\\n------ AT 8 ------\\n1 3 2\\n3 3 1\\n5 1 3\\n------ AT 9 ------\\nStari: 1 1 2\\nNovi: 1 -1 2\\n-1 1 1\\n-2 1 3\\n1 5 0\\n------ AT 10 ------\\nStari: 1 1 2\\nNovi: 1 3 2\\n3 1 1\\n4 1 3\\n1 -3 0"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 3,
            "require_symbols": [],
            "replace_symbols": [],
            "code": "std::cout<<\"------ AT 11 ------\"<<std::endl;\n    \/\/ AT 11: Test operatora ++ (prefiksna verzija)\n    {\n        \/\/ Operator mora biti izveden kao funkcija clanica\n        Robot r;\n        r.operator++();\n\n        std::cout<<(int)r.DajOrijentaciju()<<\" \";\n\n        \/\/ Test punog kruga i da li operator vraca referencu\n        r.operator++().operator++().operator++().operator++();\n\n        std::cout<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 12 ------\"<<std::endl;\n    \/\/ AT 12: Test operatora ++ (postfiksna verzija)\n    {\n        \/\/ Operator mora biti izveden kao funkcija clanica\n        Robot r;\n        r.operator++(123);\n\n        std::cout<<(int)r.DajOrijentaciju()<<\" \";\n\n        \/\/ Test punog kruga\n        r.operator++(123);\n        r.operator++(123);\n        r.operator++(123);\n        r.operator++(123);\n\n        std::cout<<(int)r.DajOrijentaciju()<<\" \";\n\n        \/\/ Test da li je ispravno izvedena postfiksna verzija po povratnom tipu\n        Robot r1 = r.operator++(12);\n        std::cout<<\"Prije: \"<<(int)r1.DajOrijentaciju()<<\" Poslije: \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 13 ------\"<<std::endl;\n    \/\/ AT 13: Test operatora -- (prefiksna verzija)\n    {\n        \/\/ Operator mora biti izveden kao funkcija clanica\n        Robot r;\n        r.operator--();\n\n        std::cout<<(int)r.DajOrijentaciju()<<\" \";\n\n        \/\/ Test punog kruga i da li operator vraca referencu\n        r.operator--().operator--().operator--().operator--();\n\n        std::cout<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 14 ------\"<<std::endl;\n    \/\/ AT 14: Test operatora -- (postfiksna verzija)\n    {\n        \/\/ Operator mora biti izveden kao funkcija clanica\n        Robot r;\n        r.operator--(123);\n\n        std::cout<<(int)r.DajOrijentaciju()<<\" \";\n\n        \/\/ Test punog kruga\n        r.operator--(123);\n        r.operator--(123);\n        r.operator--(123);\n        r.operator--(123);\n\n        std::cout<<(int)r.DajOrijentaciju()<<\" \";\n\n        \/\/ Test da li je ispravno izvedena postfiksna verzija po povratnom tipu\n        Robot r1 = r.operator--(12);\n        std::cout<<\"Prije: \"<<(int)r1.DajOrijentaciju()<<\" Poslije: \"<<(int)r.DajOrijentaciju();\n    }\n\n    std::cout<<std::endl<<\"------ AT 15 ------\"<<std::endl;\n    \/\/ AT 15: Test operatora ==\n    {\n        \/\/ Operator mora biti izveden kao prijateljska funkcija\n        Robot r(4,-5,Pravci::Zapad);\n\n        Robot r1(r);\n        std::cout<<std::boolalpha<<operator==(r,r1)<<\" \";\n\n        r1.PostaviPoziciju(4,5);\n        std::cout<<std::boolalpha<<operator==(r,r1)<<\" \";\n\n        r1.PostaviPoziciju(4,-5).PostaviOrijentaciju(Pravci::Jug);\n        std::cout<<std::boolalpha<<operator==(r,r1);\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "------ AT 11 ------\\n3 3\\n------ AT 12 ------\\n3 3 Prije: 3 Poslije: 2\\n------ AT 13 ------\\n1 1\\n------ AT 14 ------\\n1 1 Prije: 1 Poslije: 2\\n------ AT 15 ------\\ntrue false false"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 4,
            "require_symbols": [],
            "replace_symbols": [],
            "code": " std::cout<<\"------ AT 16 ------\"<<std::endl;\n    \/\/ AT 16: Test operatora !=\n    {\n        \/\/ Operator mora biti izveden kao prijateljska funkcija\n        Robot r(4,-5,Pravci::Zapad);\n\n        Robot r1(r);\n        std::cout<<std::boolalpha<<operator!=(r,r1)<<\" \";\n\n        r1.PostaviPoziciju(4,5);\n        std::cout<<std::boolalpha<<operator!=(r,r1)<<\" \";\n\n        r1.PostaviPoziciju(4,-5).PostaviOrijentaciju(Pravci::Jug);\n        std::cout<<std::boolalpha<<operator!=(r,r1);\n    }\n\n    std::cout<<std::endl<<\"------ AT 17 ------\"<<std::endl;\n    \/\/ AT 17: Test operatora << (jednostavan)\n    {\n        Robot r;\n        std::cout<<r;\n    }\n\n    std::cout<<std::endl<<\"------ AT 18 ------\"<<std::endl;\n    \/\/ AT 18: Test operatora << (napredan)\n    {\n        Robot r;\n        std::cout<<r;\n\n        r.PostaviOrijentaciju(Pravci::Zapad).PostaviPoziciju(2,-12);\n        std::cout<<r;\n\n        r++;\n        std::cout<<r;\n\n        r.PostaviOrijentaciju(Pravci::Istok).PostaviPoziciju(-22,312);\n\n        \/\/ Test da li se tok za ispis ispravno uvezuje\n        std::cout<<r<<r;\n    }\n\n    std::cout<<std::endl<<\"------ AT 19 ------\"<<std::endl;\n    \/\/ AT 19: Test da li su metode inspektori ispravno deklarirane\n    {\n        \/\/ Kod se samo treba kompajlirati, ne testiraju se ispisi\n        Robot r1(1,2,Pravci::Jug);\n\n        const Robot r(r1);\n\n        r.DajOrijentaciju();\n        r.DajPoziciju();\n\n        r.operator+(2);\n        r.operator-(2);\n\n        std::cout<<\"OK\";\n    }\n\n    std::cout<<std::endl<<\"------ AT 20 ------\"<<std::endl;\n    \/\/ AT 20: Test raznih metoda\n    {\n        Robot r1, r2(5, 3), r3(2, -1, Pravci::Istok);\n        std::cout << r1 << r2 << r3;\n        r1.PostaviPoziciju(3, 2);\n        r2.PostaviPoziciju({2, 3}).PostaviOrijentaciju(Pravci::Zapad);\n        std::cout << r1 << r2;\n        std::cout << r3.DajPoziciju().first << \" \" << r3.DajPoziciju().second\n                  << \" \" << int(r3.DajOrijentaciju()) << std::endl;\n        r1 += 10;\n        r2 -= 5;\n        std::cout << r1 << r2;\n        std::cout << std::endl;\n        for(int i = 1; i <= 5; i++)\n        {\n            r1++;\n            --r2;\n            std::cout << r1 << r2;\n        }\n        std::cout << r1 + 5 << r2 - 3;\n        std::cout << r1 << r2;\n        std::cout << std::boolalpha << (r1 == r2) << \" \" << (r1 != r2) << std::endl;\n    }",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "------ AT 16 ------\\nfalse true true\\n------ AT 17 ------\\nRobot se nalazi na poziciji (0,0) i gleda na sjever.\\n\\n------ AT 18 ------\\nRobot se nalazi na poziciji (0,0) i gleda na sjever.\\nRobot se nalazi na poziciji (2,-12) i gleda na zapad.\\nRobot se nalazi na poziciji (2,-12) i gleda na jug.\\nRobot se nalazi na poziciji (-22,312) i gleda na istok.\\nRobot se nalazi na poziciji (-22,312) i gleda na istok.\\n\\n------ AT 19 ------\\nOK\\n------ AT 20 ------\\nRobot se nalazi na poziciji (0,0) i gleda na sjever.\\nRobot se nalazi na poziciji (5,3) i gleda na sjever.\\nRobot se nalazi na poziciji (2,-1) i gleda na istok.\\nRobot se nalazi na poziciji (3,2) i gleda na sjever.\\nRobot se nalazi na poziciji (2,3) i gleda na zapad.\\n2 -1 1\\nRobot se nalazi na poziciji (3,12) i gleda na sjever.\\nRobot se nalazi na poziciji (7,3) i gleda na zapad.\\n\\nRobot se nalazi na poziciji (3,12) i gleda na zapad.\\nRobot se nalazi na poziciji (7,3) i gleda na sjever.\\nRobot se nalazi na poziciji (3,12) i gleda na jug.\\nRobot se nalazi na poziciji (7,3) i gleda na istok.\\nRobot se nalazi na poziciji (3,12) i gleda na istok.\\nRobot se nalazi na poziciji (7,3) i gleda na jug.\\nRobot se nalazi na poziciji (3,12) i gleda na sjever.\\nRobot se nalazi na poziciji (7,3) i gleda na zapad.\\nRobot se nalazi na poziciji (3,12) i gleda na zapad.\\nRobot se nalazi na poziciji (7,3) i gleda na sjever.\\nRobot se nalazi na poziciji (-2,12) i gleda na zapad.\\nRobot se nalazi na poziciji (7,0) i gleda na sjever.\\nRobot se nalazi na poziciji (3,12) i gleda na zapad.\\nRobot se nalazi na poziciji (7,3) i gleda na sjever.\\nfalse true"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}